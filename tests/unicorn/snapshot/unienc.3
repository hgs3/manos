.TH "UNICORN" "3"
.SH NAME
unienc \- text attributes
.SH LIBRARY
Embeddable Unicode Algorithms (libunicorn, -lunicorn)
.SH SYNOPSIS
.nf
.B #include <unicorn.h>
.PP
.B enum unienc {
.RS
.B UNI_SCALAR,
.B UNI_UTF8,
.B UNI_UTF16,
.B UNI_UTF32,
.B UNI_BIG,
.B UNI_LITTLE,
.B UNI_NATIVE,
.B UNI_TRUST,
.B UNI_NULIFY,
.RE
.B };
.fi
.SH DESCRIPTION
Unless documented otherwise, all functions that accept a \f[B]unienc\f[R](3) must observe the following rules:
.PP
There must be exactly one of the following encodings present.
.PP
.RS
.IP \[bu] 2
\f[B]UNI_SCALAR\f[R]
.IP \[bu] 2
\f[B]UNI_UTF8\f[R]
.IP \[bu] 2
\f[B]UNI_UTF16\f[R]
.IP \[bu] 2
\f[B]UNI_UTF32\f[R]
.RE
.PP
There can optionally be one of the following flags.
If none are present, then native byte order is assumed.
These flags are incompatible with \f[B]UNI_SCALAR\f[R] which is always in native byte order.
These flags have no affect with \f[B]UNI_UTF8\f[R] because UTF-8 is endian independent.
.PP
.RS
.IP \[bu] 2
\f[B]UNI_NATIVE\f[R]
.IP \[bu] 2
\f[B]UNI_LITTLE\f[R]
.IP \[bu] 2
\f[B]UNI_BIG\f[R]
.RE
.PP
There can optionally be any combination of the following flags.
.PP
.RS
.IP \[bu] 2
\f[B]UNI_TRUST\f[R]
.IP \[bu] 2
\f[B]UNI_NULIFY\f[R]
.RE
.PP
The following example demonstrates using these flags to parse the first code point of a UTF-16 big endian string.
.PP
.in +4n
.EX
const char16_t text[] = u"Hello, World!";
int index = 0;
unichar cp;
uni_next(text, -1, UNI_UTF16 | UNI_BIG, &index, &cp);
.EE
.in
.SH CONSTANTS
.TP
.BR UNI_SCALAR
Text stored as Unicode scalar values uses \f[B]unichar\f[R](3) for storage.
Remember that a Unicode scalar is not the same as a code point.
The former excludes surrogate characters whereas the latter does not.
.IP
Although this “encoding” is part of the \f[B]unienc\f[R](3) enumeration it is not a standardized Unicode encoding.
It is a pseudo-encoding associated with \f[B]unienc\f[R](3) for convenience.
.TP
.BR UNI_UTF8
Text encoded as UTF-8.
The implementation uses an unsigned 8-bit integer (\f[C]uint8_t\f[R]) to represent UTF-8 code units.
.TP
.BR UNI_UTF16
Text encoded as UTF-16 in native byte order.
The implementation uses an unsigned 16-bit integer (\f[C]uint16_t\f[R]) to represent UTF-16 code units.
.TP
.BR UNI_UTF32
Text encoded as UTF-32 in native byte order.
The implementation uses an unsigned 32-bit integer (\f[C]uint32_t\f[R]) to represent UTF-32 code units.
.TP
.BR UNI_BIG
This flag indicates the text is encoded in big endian byte order.
It’s incompatible with the \f[B]UNI_LITTLE\f[R] flag.
.IP
This flag is intended for use with \f[B]UNI_UTF16\f[R] and \f[B]UNI_UTF32\f[R].
It has no effect when used with \f[B]UNI_UTF8\f[R] or \f[B]UNI_SCALAR\f[R].
.TP
.BR UNI_LITTLE
This flag indicates the text is encoded in little endian byte order.
It’s incompatible with the \f[B]UNI_BIG\f[R] flag.
.IP
This flag is intended for use with \f[B]UNI_UTF16\f[R] and \f[B]UNI_UTF32\f[R].
It has no effect when used with \f[B]UNI_UTF8\f[R] or \f[B]UNI_SCALAR\f[R].
.TP
.BR UNI_NATIVE
This flag indicates the text is encoded in native endian byte order.
It’s incompatible with the \f[B]UNI_BIG\f[R] and \f[B]UNI_LITTLE\f[R] flag.
.IP
This flag is intended for use with \f[B]UNI_UTF16\f[R] and \f[B]UNI_UTF32\f[R].
It has no effect when used with \f[B]UNI_UTF8\f[R] or \f[B]UNI_SCALAR\f[R].
.TP
.BR UNI_TRUST
Under normal usage Unicorn processes text with the assumption that it might be malformed.
This means it performs safety checks which are redundant if the text has already been validated.
The purpose of this flag is to inform Unicorn that it can skip validation checks improving performance.
.IP
By itself, this is not a valid text encoding.
It is a bit flag intended to be used with a text encoding.
The following code excerpt demonstrates using this flag with the UTF-8 encoding:
.IP
.in +4n
.EX
const char8_t *text = "Hello, World!";
int index = 0;
unichar cp;
uni_next(text, -1, UNI_UTF8 | UNI_TRUST, &index, &cp);
.EE
.in
.IP
Usage of this flag means functions will never return \f[B]UNI_BAD_ENCODING\f[R].
.IP
Some functions accept an input buffer and an output buffer.
Using this flag with an output buffer will produce \f[B]UNI_BAD_OPERATION\f[R].
.TP
.BR UNI_NULIFY
Some functions accept an input buffer and an output buffer.
The output buffer is a destination buffer that the implementation writes encoded characters to.
When this flag is applied to the output buffer the implementation guarantees a NUL character (U+0000) is appended, even if it means truncating the last non-null character.
Conceptually, this behavior is like \f[C]strlcpy\f[R] which is a BSD function that garuntees the destination buffer is always null terminated even if it means truncating the last non-null character.
.IP
The implementation will never append an extraneous null character if the output buffer is already null terminated.
.IP
Using this flag with an input buffer will produce \f[B]UNI_BAD_OPERATION\f[R].
.SH SEE ALSO
.BR unichar (3),
.BR unistat (3)
.TH "UNICORN" "3"
.SH NAME
uni_sortkeymk \- make sort key
.SH LIBRARY
Embeddable Unicode Algorithms (libunicorn, -lunicorn)
.SH SYNOPSIS
.nf
.B #include <unicorn.h>
.PP
.BI "unistat uni_sortkeymk(const void *" text ", unisize " length ", unienc " encoding ", uniweighting " weighting ", unistrength " strength ", uint16_t *" sortkey ", unisize *" sortkey_cap ");"
.fi
.SH DESCRIPTION
Build a sort key for \f[I]text\f[R] in encoding form \f[I]encoding\f[R] and writes the result to \f[I]sortkey\f[R].
The number of code units in \f[I]text\f[R] is specified by \f[I]length\f[R].
If \f[I]length\f[R] is negative then \f[I]text\f[R] is assumed to be null terminated.
.PP
The implementation will set \f[I]sortkey_cap\f[R] to the number of 16-bit integers written to \f[I]sortkey\f[R].
The implementation returns \f[B]UNI_NO_SPACE\f[R] if \f[I]sortkey\f[R] lacks capacity.
In this case the value of \f[I]sortkey\f[R] is undefined and \f[I]sortkey_cap\f[R] is set to the length needed.
.PP
If the implementation detects \f[I]text\f[R] is malformed, then it returns \f[B]UNI_BAD_ENCODING\f[R].
.PP
Support for collation must be enabled in the JSON configuration file.
.PP
.in +4n
.EX
{
    "algorithms": {
        "collation": true
    }
}
.EE
.in
.SH RETURN VALUE
.TP
UNI_OK
If the scalar was successfully decoded.
.TP
UNI_NO_SPACE
If \f[I]sortkey\f[R] lacks capacity for the collation elements.
.TP
UNI_BAD_OPERATION
If \f[I]text\f[R] or \f[I]sortkey_cap\f[R] are NULL.
.TP
UNI_NO_MEMORY
If dynamic memory allocation failed.
.SH SEE ALSO
.BR unistat (3),
.BR uniweighting (3),
.BR unistrength (3)